/* tslint:disable */
/* eslint-disable */
/**
 * Cryptopay API
 * Cryptopay is a payment gateway and business wallet that allows merchants to automate the processes of accepting cryptocurrency payments and payouts from their customers, as well as making currency exchange transactions and receiving data on the transaction history and account balance statuses for reporting.
 *
 * The version of the OpenAPI document: 0.1.0
 * 
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */


import { Configuration } from './configuration';
import globalAxios, { AxiosPromise, AxiosInstance } from 'axios';
// Some imports not used depending on template conditions
// @ts-ignore
import { DUMMY_BASE_URL, assertParamExists, setApiKeyToObject, setBasicAuthToObject, setBearerAuthToObject, setOAuthToObject, setSearchParams, serializeDataIfNeeded, toPathString, createRequestFunction } from './common';
// @ts-ignore
import { BASE_PATH, COLLECTION_FORMATS, RequestArgs, BaseAPI, RequiredError } from './base';

/**
 * @type Callback
 * @export
 */
export type Callback = ChannelPaymentCallback | CoinWithdrawalCallback | InvoiceCallback;

/**
 * 
 * @export
 * @interface ChannelPayment
 */
export interface ChannelPayment {
    /**
     * 
     * @type {string}
     * @memberof ChannelPayment
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof ChannelPayment
     */
    channel_id: string;
}
/**
 * 
 * @export
 * @interface ChannelPaymentCallback
 */
export interface ChannelPaymentCallback {
    /**
     * 
     * @type {string}
     * @memberof ChannelPaymentCallback
     */
    type: ChannelPaymentCallbackTypeEnum;
    /**
     * 
     * @type {ChannelPaymentCallbackEvent}
     * @memberof ChannelPaymentCallback
     */
    event: ChannelPaymentCallbackEvent;
    /**
     * 
     * @type {ChannelPayment}
     * @memberof ChannelPaymentCallback
     */
    data: ChannelPayment;
}

/**
    * @export
    * @enum {string}
    */
export enum ChannelPaymentCallbackTypeEnum {
    ChannelPayment = 'ChannelPayment'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum ChannelPaymentCallbackEvent {
    Created = 'created',
    OnHold = 'on_hold',
    Completed = 'completed',
    Refunded = 'refunded',
    Cancelled = 'cancelled'
}

/**
 * 
 * @export
 * @interface CoinWithdrawal
 */
export interface CoinWithdrawal {
    /**
     * 
     * @type {string}
     * @memberof CoinWithdrawal
     */
    id: string;
    /**
     * 
     * @type {string}
     * @memberof CoinWithdrawal
     */
    address: string;
}
/**
 * 
 * @export
 * @interface CoinWithdrawalCallback
 */
export interface CoinWithdrawalCallback {
    /**
     * 
     * @type {string}
     * @memberof CoinWithdrawalCallback
     */
    type: CoinWithdrawalCallbackTypeEnum;
    /**
     * 
     * @type {CoinWithdrawalCallbackEvent}
     * @memberof CoinWithdrawalCallback
     */
    event: CoinWithdrawalCallbackEvent;
    /**
     * 
     * @type {CoinWithdrawal}
     * @memberof CoinWithdrawalCallback
     */
    data: CoinWithdrawal;
}

/**
    * @export
    * @enum {string}
    */
export enum CoinWithdrawalCallbackTypeEnum {
    CoinWithdrawal = 'CoinWithdrawal'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum CoinWithdrawalCallbackEvent {
    Created = 'created',
    StatusChanged = 'status_changed'
}

/**
 * Exchange details
 * @export
 * @interface Exchange
 */
export interface Exchange {
    /**
     * Currency pair
     * @type {string}
     * @memberof Exchange
     */
    pair: string;
    /**
     * Exchange rate
     * @type {number}
     * @memberof Exchange
     */
    rate: number;
    /**
     * Exchange fee
     * @type {number}
     * @memberof Exchange
     */
    fee: number;
    /**
     * Exchange fee currency
     * @type {string}
     * @memberof Exchange
     */
    fee_currency: string;
}
/**
 * 
 * @export
 * @interface Invoice
 */
export interface Invoice {
    /**
     * Invoice ID
     * @type {string}
     * @memberof Invoice
     */
    id: string;
    /**
     * Invoice reference ID in your system
     * @type {string}
     * @memberof Invoice
     */
    custom_id: string | null;
    /**
     * The internal ID of your customer that the invoice relates to
     * @type {string}
     * @memberof Invoice
     */
    customer_id: string | null;
    /**
     * 
     * @type {InvoiceStatus}
     * @memberof Invoice
     */
    status: InvoiceStatus;
    /**
     * 
     * @type {InvoiceStatusContext}
     * @memberof Invoice
     */
    status_context: InvoiceStatusContext | null;
    /**
     * Invoice cryptocurrency address
     * @type {string}
     * @memberof Invoice
     */
    address: string;
    /**
     * Invoice URI. May be used for generating a QR code
     * @type {string}
     * @memberof Invoice
     */
    uri: string;
    /**
     * Invoice amount
     * @type {number}
     * @memberof Invoice
     */
    price_amount: number;
    /**
     * Invoice amount currency
     * @type {string}
     * @memberof Invoice
     */
    price_currency: string;
    /**
     * Processing fee
     * @type {number}
     * @memberof Invoice
     */
    fee: number;
    /**
     * Processing fee currency
     * @type {string}
     * @memberof Invoice
     */
    fee_currency: string;
    /**
     * Cryptocurrency amount to pay
     * @type {number}
     * @memberof Invoice
     */
    pay_amount: number;
    /**
     * Cryptocurrency type
     * @type {string}
     * @memberof Invoice
     */
    pay_currency: string;
    /**
     * which amount already paid
     * @type {number}
     * @memberof Invoice
     */
    paid_amount: number;
    /**
     * 
     * @type {Exchange}
     * @memberof Invoice
     */
    exchange?: Exchange;
    /**
     * 
     * @type {Array<InvoiceTransaction>}
     * @memberof Invoice
     */
    transactions: Array<InvoiceTransaction>;
    /**
     * Invoice name
     * @type {string}
     * @memberof Invoice
     */
    name: string | null;
    /**
     * Invoice description
     * @type {string}
     * @memberof Invoice
     */
    description: string | null;
    /**
     * Key-value data
     * @type {object}
     * @memberof Invoice
     */
    metadata: object | null;
    /**
     * URL that a customer will be redirected to upon transaction confirmation
     * @type {string}
     * @memberof Invoice
     */
    success_redirect_url: string | null;
    /**
     * 
     * @type {string}
     * @memberof Invoice
     */
    unsuccess_redirect_url: string | null;
    /**
     * Invoice hosted page that renders invoice details
     * @type {string}
     * @memberof Invoice
     */
    hosted_page_url: string;
    /**
     * Invoice creation date and time
     * @type {string}
     * @memberof Invoice
     */
    created_at: string;
    /**
     * Invoice expiration date and time
     * @type {string}
     * @memberof Invoice
     */
    expires_at: string;
}
/**
 * 
 * @export
 * @interface InvoiceCallback
 */
export interface InvoiceCallback {
    /**
     * 
     * @type {string}
     * @memberof InvoiceCallback
     */
    type: InvoiceCallbackTypeEnum;
    /**
     * 
     * @type {InvoiceCallbackEvent}
     * @memberof InvoiceCallback
     */
    event: InvoiceCallbackEvent;
    /**
     * 
     * @type {Invoice}
     * @memberof InvoiceCallback
     */
    data: Invoice;
}

/**
    * @export
    * @enum {string}
    */
export enum InvoiceCallbackTypeEnum {
    Invoice = 'Invoice'
}

/**
 * 
 * @export
 * @enum {string}
 */

export enum InvoiceCallbackEvent {
    Created = 'created',
    Refunded = 'refunded',
    Recalculated = 'recalculated',
    StatusChanged = 'status_changed',
    TransactionCreated = 'transaction_created',
    TransactionConfirmed = 'transaction_confirmed'
}

/**
 * 
 * @export
 * @interface InvoiceListResult
 */
export interface InvoiceListResult {
    /**
     * 
     * @type {Array<Invoice>}
     * @memberof InvoiceListResult
     */
    data: Array<Invoice>;
    /**
     * 
     * @type {Pagination}
     * @memberof InvoiceListResult
     */
    meta: Pagination;
}
/**
 * 
 * @export
 * @interface InvoiceParams
 */
export interface InvoiceParams {
    /**
     * The invoice amount
     * @type {number}
     * @memberof InvoiceParams
     */
    price_amount: number;
    /**
     * The invoice amount currency
     * @type {string}
     * @memberof InvoiceParams
     */
    price_currency: string;
    /**
     * The cryptocurrency that the invoice must be paid in
     * @type {string}
     * @memberof InvoiceParams
     */
    pay_currency: string;
    /**
     * The payment reference ID in your system
     * @type {string}
     * @memberof InvoiceParams
     */
    custom_id?: string;
    /**
     * The internal ID of your customer that the invoice relates to. See Customers for more information
     * @type {string}
     * @memberof InvoiceParams
     */
    customer_id?: string;
    /**
     * The invoice name
     * @type {string}
     * @memberof InvoiceParams
     */
    name?: string;
    /**
     * The invoice description
     * @type {string}
     * @memberof InvoiceParams
     */
    description?: string;
    /**
     * Custom key-valued data
     * @type {object}
     * @memberof InvoiceParams
     */
    metadata?: object;
    /**
     * The URL that the customer will be redirected to upon transaction confirmation
     * @type {string}
     * @memberof InvoiceParams
     */
    success_redirect_url?: string;
    /**
     * 
     * @type {string}
     * @memberof InvoiceParams
     */
    unsuccess_redirect_url?: string;
}
/**
 * 
 * @export
 * @interface InvoiceRecalculation
 */
export interface InvoiceRecalculation {
    /**
     * Recalculation ID
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    id: string;
    /**
     * Invoice ID
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    invoice_id: string;
    /**
     * Cryptocurrency amount received
     * @type {number}
     * @memberof InvoiceRecalculation
     */
    pay_amount: number;
    /**
     * Cryptocurrency type
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    pay_currency: string;
    /**
     * New invoice amount
     * @type {number}
     * @memberof InvoiceRecalculation
     */
    price_amount: number;
    /**
     * Invoice amount currency
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    price_currency: string;
    /**
     * Processing fee
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    fee: string;
    /**
     * Processing fee currency
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    fee_currency: string;
    /**
     * Previous amount to pay
     * @type {number}
     * @memberof InvoiceRecalculation
     */
    previous_pay_amount: number;
    /**
     * Previous invoice amount
     * @type {number}
     * @memberof InvoiceRecalculation
     */
    previous_price_amount: number;
    /**
     * Previous exchange rate
     * @type {number}
     * @memberof InvoiceRecalculation
     */
    previous_exchange_rate: number | null;
    /**
     * 
     * @type {Exchange}
     * @memberof InvoiceRecalculation
     */
    exchange?: Exchange;
    /**
     * Recalculation creation date and time
     * @type {string}
     * @memberof InvoiceRecalculation
     */
    created_at: string;
}
/**
 * 
 * @export
 * @interface InvoiceRecalculationParams
 */
export interface InvoiceRecalculationParams {
    /**
     * Set `true` by default. Set `false` for two-step recalculation and commit it within 30 seconds
     * @type {boolean}
     * @memberof InvoiceRecalculationParams
     */
    force_commit?: boolean;
}
/**
 * 
 * @export
 * @interface InvoiceRecalculationResult
 */
export interface InvoiceRecalculationResult {
    /**
     * 
     * @type {InvoiceRecalculation}
     * @memberof InvoiceRecalculationResult
     */
    data: InvoiceRecalculation;
}
/**
 * 
 * @export
 * @interface InvoiceRefund
 */
export interface InvoiceRefund {
    /**
     * Refund ID
     * @type {string}
     * @memberof InvoiceRefund
     */
    id: string;
    /**
     * Invoice ID
     * @type {string}
     * @memberof InvoiceRefund
     */
    invoice_id: string;
    /**
     * Refund `custom_id`. The value is being inherited from the parent invoice
     * @type {string}
     * @memberof InvoiceRefund
     */
    custom_id: string;
    /**
     * Refund amount
     * @type {number}
     * @memberof InvoiceRefund
     */
    amount: number;
    /**
     * Refund currency
     * @type {string}
     * @memberof InvoiceRefund
     */
    amount_currency: string;
    /**
     * Processing fee
     * @type {number}
     * @memberof InvoiceRefund
     */
    fee: number;
    /**
     * Processing fee currency
     * @type {string}
     * @memberof InvoiceRefund
     */
    fee_currency: string;
    /**
     * Cryptocurrency address the refund transaction sent to
     * @type {string}
     * @memberof InvoiceRefund
     */
    address: string | null;
    /**
     * Cryptocurrency transaction ID on the blockchain
     * @type {string}
     * @memberof InvoiceRefund
     */
    txid: string | null;
    /**
     * 
     * @type {Risk}
     * @memberof InvoiceRefund
     */
    risk?: Risk;
    /**
     * Refund transaction creation date and time
     * @type {string}
     * @memberof InvoiceRefund
     */
    created_at: string;
}
/**
 * 
 * @export
 * @interface InvoiceRefundListResult
 */
export interface InvoiceRefundListResult {
    /**
     * 
     * @type {Array<InvoiceRefund>}
     * @memberof InvoiceRefundListResult
     */
    data: Array<InvoiceRefund>;
}
/**
 * 
 * @export
 * @interface InvoiceRefundParams
 */
export interface InvoiceRefundParams {
    /**
     * External wallet address. If not specified, the refund will be performed to your cryptocurrency account
     * @type {string}
     * @memberof InvoiceRefundParams
     */
    address?: string;
}
/**
 * 
 * @export
 * @interface InvoiceRefundResult
 */
export interface InvoiceRefundResult {
    /**
     * 
     * @type {InvoiceRefund}
     * @memberof InvoiceRefundResult
     */
    data: InvoiceRefund;
}
/**
 * 
 * @export
 * @interface InvoiceResult
 */
export interface InvoiceResult {
    /**
     * 
     * @type {Invoice}
     * @memberof InvoiceResult
     */
    data: Invoice;
}
/**
 * Invoice status
 * @export
 * @enum {string}
 */

export enum InvoiceStatus {
    New = 'new',
    Completed = 'completed',
    Unresolved = 'unresolved',
    Refunded = 'refunded',
    Cancelled = 'cancelled'
}

/**
 * Invoice status context
 * @export
 * @enum {string}
 */

export enum InvoiceStatusContext {
    Overpaid = 'overpaid',
    Underpaid = 'underpaid',
    PaidLate = 'paid_late',
    IllicitResource = 'illicit_resource'
}

/**
 * Cryptocurrency transaction hash and its risk level details
 * @export
 * @interface InvoiceTransaction
 */
export interface InvoiceTransaction {
    /**
     * Transaction hash
     * @type {string}
     * @memberof InvoiceTransaction
     */
    txid: string;
    /**
     * 
     * @type {Risk}
     * @memberof InvoiceTransaction
     */
    risk?: Risk;
}
/**
 * 
 * @export
 * @interface Pagination
 */
export interface Pagination {
    /**
     * 
     * @type {number}
     * @memberof Pagination
     */
    total: number;
    /**
     * 
     * @type {boolean}
     * @memberof Pagination
     */
    has_more: boolean;
}
/**
 * 
 * @export
 * @interface Rate
 */
export interface Rate {
    /**
     * Buy rate
     * @type {number}
     * @memberof Rate
     */
    buy_rate: number;
    /**
     * Buy rate
     * @type {number}
     * @memberof Rate
     */
    sell_rate: number;
}
/**
 * 
 * @export
 * @interface RateResult
 */
export interface RateResult {
    /**
     * 
     * @type {Rate}
     * @memberof RateResult
     */
    data: Rate;
}
/**
 * 
 * @export
 * @interface RatesResult
 */
export interface RatesResult {
    /**
     * 
     * @type {{ [key: string]: Rate; }}
     * @memberof RatesResult
     */
    data: { [key: string]: Rate; };
}
/**
 * Transaction risk level details
 * @export
 * @interface Risk
 */
export interface Risk {
    /**
     * Transaction risk score
     * @type {number}
     * @memberof Risk
     */
    score: number;
    /**
     * Transaction risk level depending on the `score` value
     * @type {string}
     * @memberof Risk
     */
    level: RiskLevelEnum;
    /**
     * A resource name the transaction has been received from
     * @type {string}
     * @memberof Risk
     */
    resource_name: string;
    /**
     * A resource category the transaction has been received from
     * @type {string}
     * @memberof Risk
     */
    resource_category: string;
}

/**
    * @export
    * @enum {string}
    */
export enum RiskLevelEnum {
    Low = 'low',
    Medium = 'medium',
    High = 'high'
}


/**
 * InvoicesApi - axios parameter creator
 * @export
 */
export const InvoicesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to commit invoice recalculation.
         * @summary Commit invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {string} recalculationId Recalculation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCommitRecalculation: async (invoiceId: string, recalculationId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('invoicesCommitRecalculation', 'invoiceId', invoiceId)
            // verify required parameter 'recalculationId' is not null or undefined
            assertParamExists('invoicesCommitRecalculation', 'recalculationId', recalculationId)
            const localVarPath = `/api/invoices/{invoice_id}/recalculations/{recalculation_id}/commit`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)))
                .replace(`{${"recalculation_id"}}`, encodeURIComponent(String(recalculationId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create invoices.
         * @summary Create an invoice
         * @param {InvoiceParams} invoiceParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreate: async (invoiceParams: InvoiceParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceParams' is not null or undefined
            assertParamExists('invoicesCreate', 'invoiceParams', invoiceParams)
            const localVarPath = `/api/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to recalculate invoices.
         * @summary Create invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRecalculationParams} invoiceRecalculationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreateRecalculation: async (invoiceId: string, invoiceRecalculationParams: InvoiceRecalculationParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('invoicesCreateRecalculation', 'invoiceId', invoiceId)
            // verify required parameter 'invoiceRecalculationParams' is not null or undefined
            assertParamExists('invoicesCreateRecalculation', 'invoiceRecalculationParams', invoiceRecalculationParams)
            const localVarPath = `/api/invoices/{invoice_id}/recalculations`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceRecalculationParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to create invoice refunds.
         * @summary Create invoice refund
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRefundParams} invoiceRefundParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreateRefund: async (invoiceId: string, invoiceRefundParams: InvoiceRefundParams, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('invoicesCreateRefund', 'invoiceId', invoiceId)
            // verify required parameter 'invoiceRefundParams' is not null or undefined
            assertParamExists('invoicesCreateRefund', 'invoiceRefundParams', invoiceRefundParams)
            const localVarPath = `/api/invoices/{invoice_id}/refunds`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'POST', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            localVarHeaderParameter['Content-Type'] = 'application/json';

            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};
            localVarRequestOptions.data = serializeDataIfNeeded(invoiceRefundParams, localVarRequestOptions, configuration)

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a list of all invoices.
         * @summary List invoices
         * @param {string} [customerId] The internal ID of your customer that the invoice relates to. See Customers for more information
         * @param {string} [startingAfter] Pagination parameter. ID to start after
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesList: async (customerId?: string, startingAfter?: string, options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/invoices`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required

            if (customerId !== undefined) {
                localVarQueryParameter['customer_id'] = customerId;
            }

            if (startingAfter !== undefined) {
                localVarQueryParameter['starting_after'] = startingAfter;
            }


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a list of a particular invoice refunds.
         * @summary List invoice refunds
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesListRefunds: async (invoiceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('invoicesListRefunds', 'invoiceId', invoiceId)
            const localVarPath = `/api/invoices/{invoice_id}/refunds`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve the invoice details.
         * @summary Retrieve an invoice
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesRetrieve: async (invoiceId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'invoiceId' is not null or undefined
            assertParamExists('invoicesRetrieve', 'invoiceId', invoiceId)
            const localVarPath = `/api/invoices/{invoice_id}`
                .replace(`{${"invoice_id"}}`, encodeURIComponent(String(invoiceId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve invoice details by its custom_id.
         * @summary Retrieve an invoice by custom_id
         * @param {string} customId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesRetrieveByCustomId: async (customId: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'customId' is not null or undefined
            assertParamExists('invoicesRetrieveByCustomId', 'customId', customId)
            const localVarPath = `/api/invoices/custom_id/{custom_id}`
                .replace(`{${"custom_id"}}`, encodeURIComponent(String(customId)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * InvoicesApi - functional programming interface
 * @export
 */
export const InvoicesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = InvoicesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to commit invoice recalculation.
         * @summary Commit invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {string} recalculationId Recalculation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesCommitRecalculation(invoiceId: string, recalculationId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceRecalculationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesCommitRecalculation(invoiceId, recalculationId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create invoices.
         * @summary Create an invoice
         * @param {InvoiceParams} invoiceParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesCreate(invoiceParams: InvoiceParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesCreate(invoiceParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to recalculate invoices.
         * @summary Create invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRecalculationParams} invoiceRecalculationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesCreateRecalculation(invoiceId: string, invoiceRecalculationParams: InvoiceRecalculationParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceRecalculationResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesCreateRecalculation(invoiceId, invoiceRecalculationParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to create invoice refunds.
         * @summary Create invoice refund
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRefundParams} invoiceRefundParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesCreateRefund(invoiceId: string, invoiceRefundParams: InvoiceRefundParams, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceRefundResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesCreateRefund(invoiceId, invoiceRefundParams, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve a list of all invoices.
         * @summary List invoices
         * @param {string} [customerId] The internal ID of your customer that the invoice relates to. See Customers for more information
         * @param {string} [startingAfter] Pagination parameter. ID to start after
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesList(customerId?: string, startingAfter?: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesList(customerId, startingAfter, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve a list of a particular invoice refunds.
         * @summary List invoice refunds
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesListRefunds(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceRefundListResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesListRefunds(invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve the invoice details.
         * @summary Retrieve an invoice
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesRetrieve(invoiceId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesRetrieve(invoiceId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve invoice details by its custom_id.
         * @summary Retrieve an invoice by custom_id
         * @param {string} customId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async invoicesRetrieveByCustomId(customId: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<InvoiceResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.invoicesRetrieveByCustomId(customId, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * InvoicesApi - factory interface
 * @export
 */
export const InvoicesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = InvoicesApiFp(configuration)
    return {
        /**
         * This endpoint allows you to commit invoice recalculation.
         * @summary Commit invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {string} recalculationId Recalculation ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCommitRecalculation(invoiceId: string, recalculationId: string, options?: any): AxiosPromise<InvoiceRecalculationResult> {
            return localVarFp.invoicesCommitRecalculation(invoiceId, recalculationId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create invoices.
         * @summary Create an invoice
         * @param {InvoiceParams} invoiceParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreate(invoiceParams: InvoiceParams, options?: any): AxiosPromise<InvoiceResult> {
            return localVarFp.invoicesCreate(invoiceParams, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to recalculate invoices.
         * @summary Create invoice recalculation
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRecalculationParams} invoiceRecalculationParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreateRecalculation(invoiceId: string, invoiceRecalculationParams: InvoiceRecalculationParams, options?: any): AxiosPromise<InvoiceRecalculationResult> {
            return localVarFp.invoicesCreateRecalculation(invoiceId, invoiceRecalculationParams, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to create invoice refunds.
         * @summary Create invoice refund
         * @param {string} invoiceId Invoice ID
         * @param {InvoiceRefundParams} invoiceRefundParams 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesCreateRefund(invoiceId: string, invoiceRefundParams: InvoiceRefundParams, options?: any): AxiosPromise<InvoiceRefundResult> {
            return localVarFp.invoicesCreateRefund(invoiceId, invoiceRefundParams, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a list of all invoices.
         * @summary List invoices
         * @param {string} [customerId] The internal ID of your customer that the invoice relates to. See Customers for more information
         * @param {string} [startingAfter] Pagination parameter. ID to start after
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesList(customerId?: string, startingAfter?: string, options?: any): AxiosPromise<InvoiceListResult> {
            return localVarFp.invoicesList(customerId, startingAfter, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a list of a particular invoice refunds.
         * @summary List invoice refunds
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesListRefunds(invoiceId: string, options?: any): AxiosPromise<InvoiceRefundListResult> {
            return localVarFp.invoicesListRefunds(invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve the invoice details.
         * @summary Retrieve an invoice
         * @param {string} invoiceId Invoice ID
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesRetrieve(invoiceId: string, options?: any): AxiosPromise<InvoiceResult> {
            return localVarFp.invoicesRetrieve(invoiceId, options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve invoice details by its custom_id.
         * @summary Retrieve an invoice by custom_id
         * @param {string} customId 
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        invoicesRetrieveByCustomId(customId: string, options?: any): AxiosPromise<InvoiceResult> {
            return localVarFp.invoicesRetrieveByCustomId(customId, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * InvoicesApi - object-oriented interface
 * @export
 * @class InvoicesApi
 * @extends {BaseAPI}
 */
export class InvoicesApi extends BaseAPI {
    /**
     * This endpoint allows you to commit invoice recalculation.
     * @summary Commit invoice recalculation
     * @param {string} invoiceId Invoice ID
     * @param {string} recalculationId Recalculation ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesCommitRecalculation(invoiceId: string, recalculationId: string, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesCommitRecalculation(invoiceId, recalculationId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create invoices.
     * @summary Create an invoice
     * @param {InvoiceParams} invoiceParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesCreate(invoiceParams: InvoiceParams, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesCreate(invoiceParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to recalculate invoices.
     * @summary Create invoice recalculation
     * @param {string} invoiceId Invoice ID
     * @param {InvoiceRecalculationParams} invoiceRecalculationParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesCreateRecalculation(invoiceId: string, invoiceRecalculationParams: InvoiceRecalculationParams, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesCreateRecalculation(invoiceId, invoiceRecalculationParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to create invoice refunds.
     * @summary Create invoice refund
     * @param {string} invoiceId Invoice ID
     * @param {InvoiceRefundParams} invoiceRefundParams 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesCreateRefund(invoiceId: string, invoiceRefundParams: InvoiceRefundParams, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesCreateRefund(invoiceId, invoiceRefundParams, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a list of all invoices.
     * @summary List invoices
     * @param {string} [customerId] The internal ID of your customer that the invoice relates to. See Customers for more information
     * @param {string} [startingAfter] Pagination parameter. ID to start after
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesList(customerId?: string, startingAfter?: string, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesList(customerId, startingAfter, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a list of a particular invoice refunds.
     * @summary List invoice refunds
     * @param {string} invoiceId Invoice ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesListRefunds(invoiceId: string, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesListRefunds(invoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve the invoice details.
     * @summary Retrieve an invoice
     * @param {string} invoiceId Invoice ID
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesRetrieve(invoiceId: string, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesRetrieve(invoiceId, options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve invoice details by its custom_id.
     * @summary Retrieve an invoice by custom_id
     * @param {string} customId 
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof InvoicesApi
     */
    public invoicesRetrieveByCustomId(customId: string, options?: any) {
        return InvoicesApiFp(this.configuration).invoicesRetrieveByCustomId(customId, options).then((request) => request(this.axios, this.basePath));
    }
}


/**
 * RatesApi - axios parameter creator
 * @export
 */
export const RatesApiAxiosParamCreator = function (configuration?: Configuration) {
    return {
        /**
         * This endpoint allows you to retrieve all public rates.
         * @summary Retrieve all rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratesAll: async (options: any = {}): Promise<RequestArgs> => {
            const localVarPath = `/api/rates`;
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
        /**
         * This endpoint allows you to retrieve a public rate by currency pair.
         * @summary Retrieve a pair rate
         * @param {string} pair Currency pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratesRetrieve: async (pair: string, options: any = {}): Promise<RequestArgs> => {
            // verify required parameter 'pair' is not null or undefined
            assertParamExists('ratesRetrieve', 'pair', pair)
            const localVarPath = `/api/rates/{pair}`
                .replace(`{${"pair"}}`, encodeURIComponent(String(pair)));
            // use dummy base URL string because the URL constructor only accepts absolute URLs.
            const localVarUrlObj = new URL(localVarPath, DUMMY_BASE_URL);
            let baseOptions;
            if (configuration) {
                baseOptions = configuration.baseOptions;
            }

            const localVarRequestOptions = { method: 'GET', ...baseOptions, ...options};
            const localVarHeaderParameter = {} as any;
            const localVarQueryParameter = {} as any;

            // authentication HMAC required


    
            setSearchParams(localVarUrlObj, localVarQueryParameter, options.query);
            let headersFromBaseOptions = baseOptions && baseOptions.headers ? baseOptions.headers : {};
            localVarRequestOptions.headers = {...localVarHeaderParameter, ...headersFromBaseOptions, ...options.headers};

            return {
                url: toPathString(localVarUrlObj),
                options: localVarRequestOptions,
            };
        },
    }
};

/**
 * RatesApi - functional programming interface
 * @export
 */
export const RatesApiFp = function(configuration?: Configuration) {
    const localVarAxiosParamCreator = RatesApiAxiosParamCreator(configuration)
    return {
        /**
         * This endpoint allows you to retrieve all public rates.
         * @summary Retrieve all rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratesAll(options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RatesResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratesAll(options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
        /**
         * This endpoint allows you to retrieve a public rate by currency pair.
         * @summary Retrieve a pair rate
         * @param {string} pair Currency pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        async ratesRetrieve(pair: string, options?: any): Promise<(axios?: AxiosInstance, basePath?: string) => AxiosPromise<RateResult>> {
            const localVarAxiosArgs = await localVarAxiosParamCreator.ratesRetrieve(pair, options);
            return createRequestFunction(localVarAxiosArgs, globalAxios, BASE_PATH, configuration);
        },
    }
};

/**
 * RatesApi - factory interface
 * @export
 */
export const RatesApiFactory = function (configuration?: Configuration, basePath?: string, axios?: AxiosInstance) {
    const localVarFp = RatesApiFp(configuration)
    return {
        /**
         * This endpoint allows you to retrieve all public rates.
         * @summary Retrieve all rates
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratesAll(options?: any): AxiosPromise<RatesResult> {
            return localVarFp.ratesAll(options).then((request) => request(axios, basePath));
        },
        /**
         * This endpoint allows you to retrieve a public rate by currency pair.
         * @summary Retrieve a pair rate
         * @param {string} pair Currency pair
         * @param {*} [options] Override http request option.
         * @throws {RequiredError}
         */
        ratesRetrieve(pair: string, options?: any): AxiosPromise<RateResult> {
            return localVarFp.ratesRetrieve(pair, options).then((request) => request(axios, basePath));
        },
    };
};

/**
 * RatesApi - object-oriented interface
 * @export
 * @class RatesApi
 * @extends {BaseAPI}
 */
export class RatesApi extends BaseAPI {
    /**
     * This endpoint allows you to retrieve all public rates.
     * @summary Retrieve all rates
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    public ratesAll(options?: any) {
        return RatesApiFp(this.configuration).ratesAll(options).then((request) => request(this.axios, this.basePath));
    }

    /**
     * This endpoint allows you to retrieve a public rate by currency pair.
     * @summary Retrieve a pair rate
     * @param {string} pair Currency pair
     * @param {*} [options] Override http request option.
     * @throws {RequiredError}
     * @memberof RatesApi
     */
    public ratesRetrieve(pair: string, options?: any) {
        return RatesApiFp(this.configuration).ratesRetrieve(pair, options).then((request) => request(this.axios, this.basePath));
    }
}


